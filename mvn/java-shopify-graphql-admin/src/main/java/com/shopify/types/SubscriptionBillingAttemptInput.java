package com.shopify.types;

import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.time.OffsetDateTime;
import java.util.Objects;

/**
 * The input fields required to complete a subscription billing attempt.
 */
public class SubscriptionBillingAttemptInput {
  /**
   * A unique key generated by the client to avoid duplicate payments. For more
   * information, refer to [Idempotent
   * requests](https://shopify.dev/api/usage/idempotent-requests).
   */
  private String idempotencyKey;

  /**
   * The date and time used to calculate fulfillment intervals for a billing attempt that
   * successfully completed after the current anchor date. To prevent fulfillment from being
   * pushed to the next anchor date, this field can override the billing attempt date.
   */
  private OffsetDateTime originTime;

  /**
   * Select the specific billing cycle to be billed.
   * Default to bill the current billing cycle if not specified.
   */
  private SubscriptionBillingCycleSelector billingCycleSelector;

  /**
   * The behaviour to follow when creating an order for a product variant
   *       when it's out of stock.
   */
  private SubscriptionBillingAttemptInventoryPolicy inventoryPolicy = SubscriptionBillingAttemptInventoryPolicy.PRODUCT_VARIANT_INVENTORY_POLICY;

  public SubscriptionBillingAttemptInput() {
  }

  /**
   * A unique key generated by the client to avoid duplicate payments. For more
   * information, refer to [Idempotent
   * requests](https://shopify.dev/api/usage/idempotent-requests).
   */
  public String getIdempotencyKey() {
    return idempotencyKey;
  }

  public void setIdempotencyKey(String idempotencyKey) {
    this.idempotencyKey = idempotencyKey;
  }

  /**
   * The date and time used to calculate fulfillment intervals for a billing attempt that
   * successfully completed after the current anchor date. To prevent fulfillment from being
   * pushed to the next anchor date, this field can override the billing attempt date.
   */
  public OffsetDateTime getOriginTime() {
    return originTime;
  }

  public void setOriginTime(OffsetDateTime originTime) {
    this.originTime = originTime;
  }

  /**
   * Select the specific billing cycle to be billed.
   * Default to bill the current billing cycle if not specified.
   */
  public SubscriptionBillingCycleSelector getBillingCycleSelector() {
    return billingCycleSelector;
  }

  public void setBillingCycleSelector(SubscriptionBillingCycleSelector billingCycleSelector) {
    this.billingCycleSelector = billingCycleSelector;
  }

  /**
   * The behaviour to follow when creating an order for a product variant
   *       when it's out of stock.
   */
  public SubscriptionBillingAttemptInventoryPolicy getInventoryPolicy() {
    return inventoryPolicy;
  }

  public void setInventoryPolicy(SubscriptionBillingAttemptInventoryPolicy inventoryPolicy) {
    this.inventoryPolicy = inventoryPolicy;
  }

  @Override
  public String toString() {
    return "SubscriptionBillingAttemptInput{idempotencyKey='" + idempotencyKey + "', originTime='" + originTime + "', billingCycleSelector='" + billingCycleSelector + "', inventoryPolicy='" + inventoryPolicy + "'}";
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) return true;
    if (o == null || getClass() != o.getClass()) return false;
    SubscriptionBillingAttemptInput that = (SubscriptionBillingAttemptInput) o;
    return Objects.equals(idempotencyKey, that.idempotencyKey) &&
        Objects.equals(originTime, that.originTime) &&
        Objects.equals(billingCycleSelector, that.billingCycleSelector) &&
        Objects.equals(inventoryPolicy, that.inventoryPolicy);
  }

  @Override
  public int hashCode() {
    return Objects.hash(idempotencyKey, originTime, billingCycleSelector, inventoryPolicy);
  }

  public static Builder newBuilder() {
    return new Builder();
  }

  public static class Builder {
    /**
     * A unique key generated by the client to avoid duplicate payments. For more
     * information, refer to [Idempotent
     * requests](https://shopify.dev/api/usage/idempotent-requests).
     */
    private String idempotencyKey;

    /**
     * The date and time used to calculate fulfillment intervals for a billing attempt that
     * successfully completed after the current anchor date. To prevent fulfillment from being
     * pushed to the next anchor date, this field can override the billing attempt date.
     */
    private OffsetDateTime originTime;

    /**
     * Select the specific billing cycle to be billed.
     * Default to bill the current billing cycle if not specified.
     */
    private SubscriptionBillingCycleSelector billingCycleSelector;

    /**
     * The behaviour to follow when creating an order for a product variant
     *       when it's out of stock.
     */
    private SubscriptionBillingAttemptInventoryPolicy inventoryPolicy = SubscriptionBillingAttemptInventoryPolicy.PRODUCT_VARIANT_INVENTORY_POLICY;

    public SubscriptionBillingAttemptInput build() {
      SubscriptionBillingAttemptInput result = new SubscriptionBillingAttemptInput();
      result.idempotencyKey = this.idempotencyKey;
      result.originTime = this.originTime;
      result.billingCycleSelector = this.billingCycleSelector;
      result.inventoryPolicy = this.inventoryPolicy;
      return result;
    }

    /**
     * A unique key generated by the client to avoid duplicate payments. For more
     * information, refer to [Idempotent
     * requests](https://shopify.dev/api/usage/idempotent-requests).
     */
    public Builder idempotencyKey(String idempotencyKey) {
      this.idempotencyKey = idempotencyKey;
      return this;
    }

    /**
     * The date and time used to calculate fulfillment intervals for a billing attempt that
     * successfully completed after the current anchor date. To prevent fulfillment from being
     * pushed to the next anchor date, this field can override the billing attempt date.
     */
    public Builder originTime(OffsetDateTime originTime) {
      this.originTime = originTime;
      return this;
    }

    /**
     * Select the specific billing cycle to be billed.
     * Default to bill the current billing cycle if not specified.
     */
    public Builder billingCycleSelector(SubscriptionBillingCycleSelector billingCycleSelector) {
      this.billingCycleSelector = billingCycleSelector;
      return this;
    }

    /**
     * The behaviour to follow when creating an order for a product variant
     *       when it's out of stock.
     */
    public Builder inventoryPolicy(SubscriptionBillingAttemptInventoryPolicy inventoryPolicy) {
      this.inventoryPolicy = inventoryPolicy;
      return this;
    }
  }
}
